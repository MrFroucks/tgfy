import telebot
import sqlite3

from telebot import types  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from googletrans import Translator 


# —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
bot = telebot.TeleBot('7023063772:AAFFbn8O4wnmyTaCDQnoDimkSC5KDLMeuw4')

# —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
trans = Translator()

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–¥ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
db = sqlite3.connect('database.db', check_same_thread=False)
c = db.cursor()


c.execute('''
          CREATE TABLE IF NOT EXISTS users (
          id INTEGER,
          user_name TEXT,
          lang TEXT,
          topic TEXT,
          text TEXT,
          date DATE,
          moderator INTEGER 
          )
          ''')

c.execute('''
          CREATE TABLE IF NOT EXISTS moderators (
          id INTEGER UNIQUE,
          user_name TEXT,
          score INTEGER
          )
          ''')

def trans_message(message, lang):
    translated_message = trans.translate(message, dest = lang)
    return translated_message.text

def check_user(id):
    all_data = c.execute('SELECT * FROM users WHERE id = ?', (id,)).fetchall()
    return all_data

def add_user(id, user_name, lang):
    c.execute('INSERT INTO users (id, user_name, lang) VALUES (?, ?, ?)', (id, user_name, lang))
    db.commit()

def check_moderator(id):
    moderator_data = c.execute('SELECT moderator FROM users WHERE id = ?', (id,)).fetchone()
    return moderator_data[0]

def add_lang(lang, id):
    c.execute('UPDATE users SET lang = ? WHERE id = ?', (lang, id))
    db.commit()

def get_lang(id):
    lang = c.execute('SELECT lang FROM users WHERE id = ?', (id,)).fetchone()
    lang = lang[0]
    return lang

def add_text(id, text, topic):
    c.execute('UPDATE users SET topic = ?, text = ? WHERE id = ?', (topic, text, id))
    db.commit()

@bot.message_handler(commands = ['start'])
def MAIN(message):
    id = message.from_user.id
    user_name = message.from_user.username
    if not check_user(id):
        Mchose_lang = InlineKeyboardMarkup()
        Mchose_lang.row(InlineKeyboardButton('English', callback_data = 'en'),
                        InlineKeyboardButton('Espa√±ol', callback_data = 'es'),
                        InlineKeyboardButton('–†—É—Å—Å–∫–∏–π', callback_data = 'ru'))

        bot.send_message(id, 'Hello! üòä I am the TGFY support bot! ü§ñ To get started, choose your language. üåç\nTo change the language, use the command /lang.\n\n¬°Hola! üòä ¬°Soy el bot de soporte de TGFY! ü§ñ Para comenzar, elige tu idioma. üåç\nPara cambiar el idioma, usa el comando /lang.\n\n–ü—Ä–∏–≤–µ—Ç! üòä –Ø ‚Äî –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ TGFY! ü§ñ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —è–∑—ã–∫. üåç\n–ß—Ç–æ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /lang', reply_markup = Mchose_lang)
    else:
        if check_moderator(id) == 1:
            id = message.from_user.id
            user_name = message.from_user.username
            Mmod_menu = InlineKeyboardMarkup()
            Mmod_menu.row(InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data = 'helps'),
                          InlineKeyboardButton('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', callback_data = 'sugs'))
            bot.send_message(id, '–í—ã–±–µ—Ä–∏ –±–ª–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π.', reply_markup = Mmod_menu)
        else:
            next_step(id, user_name)

def next_step(id, user_name):
    Mchose_block = InlineKeyboardMarkup()
    Mchose_block.row(InlineKeyboardButton(trans_message('–ü–æ–º–æ—â—å', get_lang(id)), callback_data = 'help'),
                    InlineKeyboardButton(trans_message('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', get_lang(id)), callback_data = 'sug'))
    bot.send_message(id, trans_message('–ü—Ä–∏–≤–µ—Ç! üòä –Ø ‚Äî –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ TGFY!\nü§ñ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –Ω–∞–º –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å! üí¨\n\n–í—ã–±–µ—Ä–∏ –±–ª–æ–∫ —Å —Ç–µ–º–æ–π –æ–±—Ä–∞—â–µ–Ω–∏—è.', get_lang(id)), reply_markup = Mchose_block)

@bot.callback_query_handler(func=lambda call: call.data == 'helps')
def helps(call):
    id = call.from_user.id
    help_requests = c.execute('SELECT text, user_name FROM users WHERE topic = ?', ('–ü–æ–º–æ—â—å',)).fetchall()
    response_text = "–í–æ—Ç –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ '–ü–æ–º–æ—â—å':\n\n"
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    for text, user_name in help_requests:
        response_text += f"{text} (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: @{user_name})\n"
    bot.send_message(id, response_text)

@bot.callback_query_handler(func=lambda call: call.data == 'sugs')
def sugs(call):
    id = call.from_user.id
    help_requests = c.execute('SELECT text, user_name FROM users WHERE topic = ?', ('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',)).fetchall()
    response_text = "–í–æ—Ç –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ':\n\n"
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    for text, user_name in help_requests:
        response_text += f"{text} (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: @{user_name})\n"
    bot.send_message(id, response_text)

@bot.callback_query_handler(func=lambda call: call.data == 'sug')
def sug(call):
    id = call.from_user.id
    user_name = call.from_user.username
    topic = '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
    bot.send_message(id, trans_message('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –º—ã –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.', get_lang(id)))
    bot.register_next_step_handler(call.message, process_user_message, id, topic)

def process_user_message(message, id, topic):
    text = message.text
    add_text(id, text, topic)
    bot.send_message(id, trans_message('–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, —Å–ø–∞—Å–∏–±–æ!', get_lang(id)))


@bot.callback_query_handler(func=lambda call: call.data == 'help')
def help(call):
    id = call.from_user.id
    user_name = call.from_user.username
    topic = '–ü–æ–º–æ—â—å'
    bot.send_message(id, trans_message('–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏ —Å—Ç–æ—Ä—É–¥–Ω–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', get_lang(id)))
    bot.register_next_step_handler(call.message, process_user_message, id, topic)

def process_user_message(message, id, topic):
    text = message.text
    add_text(id, text, topic)
    bot.send_message(id, trans_message('–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.', get_lang(id)))


@bot.callback_query_handler(func=lambda call: call.data == 'en')
def en(call):
    id = call.from_user.id
    user_name = call.from_user.username
    lang = 'en'
    if not check_user(id):
        add_user(id, user_name, lang)
    else:
        add_lang(lang, id)
    next_step(id, user_name)

@bot.callback_query_handler(func=lambda call: call.data == 'es')
def en(call):
    id = call.from_user.id
    user_name = call.from_user.username
    lang = 'es'
    if not check_user(id):
        add_user(id, user_name, lang)
    else:
        add_lang(lang, id)
    next_step(id, user_name)

@bot.callback_query_handler(func=lambda call: call.data == 'ru')
def en(call):
    id = call.from_user.id
    user_name = call.from_user.username
    lang = 'ru'
    if not check_user(id):
        add_user(id, user_name, lang)
    else:
        add_lang(lang, id)
    next_step(id, user_name)


if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    bot.infinity_polling()
