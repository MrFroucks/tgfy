import telebot
import sqlite3

from telebot import types  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from googletrans import Translator 


# —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
bot = telebot.TeleBot('7023063772:AAFFbn8O4wnmyTaCDQnoDimkSC5KDLMeuw4')

# —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
trans = Translator()

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–¥ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
db = sqlite3.connect(r'E:\Python\TGFY_support\database.db', check_same_thread=False)
c = db.cursor()

# —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
c.execute('''
          CREATE TABLE IF NOT EXISTS users (
          id INTEGER,
          user_name TEXT,
          lang TEXT,
          moderator INTEGER 
          )
          ''')

# —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π
c.execute('''
          CREATE TABLE IF NOT EXISTS support (
          id INTEGER,
          user_name TEXT,
          topic TEXT,
          text TEXT,
          date DATE
          )
          ''')

# —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ [–ù–ï–†–ê–ë–û–¢–ê–ï–¢]
c.execute('''
          CREATE TABLE IF NOT EXISTS moderators (
          id INTEGER UNIQUE,
          user_name TEXT,
          score INTEGER
          )
          ''')

# –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
def trans_message(message, lang):
    translated_message = trans.translate(message, dest = lang)
    return translated_message.text

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
def check_user(id):
    all_data = c.execute('SELECT * FROM users WHERE id = ?', (id,)).fetchall()
    return all_data

# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(id, user_name, lang):
    c.execute('INSERT INTO users (id, user_name, lang) VALUES (?, ?, ?)', (id, user_name, lang))
    db.commit()

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
def check_moderator(id):
    moderator_data = c.execute('SELECT moderator FROM users WHERE id = ?', (id,)).fetchone()
    return moderator_data[0]

# –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–æ–≤—ã–π
def add_lang(lang, id):
    c.execute('UPDATE users SET lang = ? WHERE id = ?', (lang, id))
    db.commit()

# –ø–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_lang(id):
    lang = c.execute('SELECT lang FROM users WHERE id = ?', (id,)).fetchone()
    lang = lang[0]
    return lang

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_text(id, text, topic, user_name):
    current_time = datetime.now().strftime('%H:%M %d-%m-%Y')
    c.execute('INSERT INTO support (id, user_name, topic, text, date) VALUES (?, ?, ?, ?, ?)', (id, user_name, topic, text, current_time))
    db.commit()


# ---------------------------------------------------------
# –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ò –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê –° –ë–û–¢–û–ú
# ---------------------------------------------------------
@bot.message_handler(commands = ['start'])
def MAIN(message):
    id = message.from_user.id
    user_name = message.from_user.username
    if not check_user(id): # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –µ–º—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ 
        Mchose_lang = InlineKeyboardMarkup()
        Mchose_lang.row(InlineKeyboardButton('English', callback_data = 'lang_en'),
                        InlineKeyboardButton('Espa√±ol', callback_data = 'lang_es'),
                        InlineKeyboardButton('Fran√ßais', callback_data = 'lang_fr'),
                        InlineKeyboardButton('‰∏≠Êñá', callback_data = 'lang_zh-CN'),
                        InlineKeyboardButton('–†—É—Å—Å–∫–∏–π', callback_data = 'lang_ru'))

        bot.send_message(id, 'Hello! üòä I am the TGFY support bot! ü§ñ To get started, choose your language. üåç\nTo change the language, use the command /lang.\n\n¬°Hola! üòä ¬°Soy el bot de soporte de TGFY! ü§ñ Para comenzar, elige tu idioma. üåç\nPara cambiar el idioma, usa el comando /lang.\n\nBonjour ! üòä Je suis le bot de support TGFY ! ü§ñ Pour commencer, choisissez votre langue. üåç\nPour changer de langue, utilisez la commande /lang\n\n‰Ω†Â•ΩÔºÅüòä ÊàëÊòØTGFYÊîØÊåÅÊú∫Âô®‰∫∫ÔºÅü§ñ Ë¶ÅÂºÄÂßãÔºåËØ∑ÈÄâÊã©ÊÇ®ÁöÑËØ≠Ë®Ä„ÄÇüåç\nË¶ÅÊõ¥ÊîπËØ≠Ë®ÄÔºåËØ∑‰ΩøÁî®ÂëΩ‰ª§/lang„ÄÇ\n\n–ü—Ä–∏–≤–µ—Ç! üòä –Ø ‚Äî –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ TGFY! ü§ñ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —è–∑—ã–∫. üåç\n–ß—Ç–æ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /lang.', reply_markup = Mchose_lang)
    else:
        if check_moderator(id) == 1: # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            id = message.from_user.id
            user_name = message.from_user.username
            Mmod_menu = InlineKeyboardMarkup()
            Mmod_menu.row(InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data = 'helps'),
                          InlineKeyboardButton('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', callback_data = 'sugs'))
            bot.send_message(id, '–í—ã–±–µ—Ä–∏ –±–ª–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π.', reply_markup = Mmod_menu)
        else:
            next_step(id)


# ----------------------------
# –ò–ó–ú–ï–ù–ï–ù–ò–ï –Ø–ó–´–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# ----------------------------
@bot.message_handler(commands = ['lang', 'l', 'lan', 'ln', 'lg', 'lng'])
def lang(message):
    id = message.from_user.id
    Mchose_lang = InlineKeyboardMarkup()
    Mchose_lang.row(InlineKeyboardButton('English', callback_data = 'lang_en'),
                    InlineKeyboardButton('Espa√±ol', callback_data = 'lang_es'),
                    InlineKeyboardButton('Fran√ßais', callback_data = 'lang_fr'),
                    InlineKeyboardButton('‰∏≠Êñá', callback_data = 'lang_zh-CN'),
                    InlineKeyboardButton('–†—É—Å—Å–∫–∏–π', callback_data = 'lang_ru'))
    bot.send_message(id, 'Choose a convenient language.\n\nElige un idioma conveniente.\n\nÈÄâÊã©‰∏Ä‰∏™Êñπ‰æøÁöÑËØ≠Ë®Ä„ÄÇ\n\n–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —è–∑—ã–∫.', reply_markup = Mchose_lang)


# –≤—ã–±–æ—Ä —Ç–µ–º—ã –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def next_step(id):
    Mchose_block = InlineKeyboardMarkup()
    Mchose_block.row(InlineKeyboardButton(trans_message('–ü–æ–º–æ—â—å', get_lang(id)), callback_data = 'help'),
                    InlineKeyboardButton(trans_message('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', get_lang(id)), callback_data = 'sug'))
    bot.send_message(id, trans_message('–ü—Ä–∏–≤–µ—Ç! üòä –Ø ‚Äî –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ TGFY!\nü§ñ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –Ω–∞–º –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å! üí¨\n\n–í—ã–±–µ—Ä–∏ –±–ª–æ–∫ —Å —Ç–µ–º–æ–π –æ–±—Ä–∞—â–µ–Ω–∏—è.', get_lang(id)), reply_markup = Mchose_block)

# –ø—Ä–∏–Ω—è—Ç–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def process_user_message(message, id, topic, user_name):
    text = message.text
    if text != '/start': # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ /start, —Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–ø–∏—Å—å –æ–±—Ä–∞—â–µ–Ω–∏—è 
        add_text(id, text, topic, user_name) # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è 
        Mchose_block = InlineKeyboardMarkup()
        Mchose_block.row(InlineKeyboardButton(trans_message('–ü–æ–º–æ—â—å', get_lang(id)), callback_data = 'help'),
                         InlineKeyboardButton(trans_message('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', get_lang(id)), callback_data = 'sug'))
        bot.send_message(id, trans_message('–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.\n–ñ–¥—ë–º, –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–Ω–æ–≤–∞ :)', get_lang(id)), reply_markup = Mchose_block)
    else: # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç /start, –±–æ—Ç –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        next_step(id)


# -----------------------------------
# –†–ê–ë–û–¢–ê –° –ò–ù–õ–ê–ô–ù –ö–ù–û–ü–ö–ê–ú–ò –ú–û–î–ï–†–ê–¢–û–†–ê
# ----------------------------------- 
@bot.callback_query_handler(func=lambda call: call.data == 'helps')
def helps(call):
    id = call.from_user.id
    help_requests = c.execute('SELECT text, user_name, date FROM support WHERE topic = ?', ('–ü–æ–º–æ—â—å',)).fetchall()
    response_text = "–í–æ—Ç –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ '–ü–æ–º–æ—â—å':\n\n"
    for text, user_name, date in help_requests:
        response_text += f"üìù {text}\nüë§ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: @{user_name}\nüìÖ –î–∞—Ç–∞: {date}\n\n"  # –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ date –∏ —É–ª—É—á—à–µ–Ω —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
    bot.send_message(id, response_text)

@bot.callback_query_handler(func=lambda call: call.data == 'sugs')
def sugs(call):
    id = call.from_user.id
    help_requests = c.execute('SELECT text, user_name, date FROM support WHERE topic = ?', ('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',)).fetchall()
    response_text = "–í–æ—Ç –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ':\n\n"
    for text, user_name, date in help_requests:
        response_text += f"üìù {text}\nüë§ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: @{user_name}\nüìÖ –î–∞—Ç–∞: {date}\n\n"  # –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ date –∏ —É–ª—É—á—à–µ–Ω —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
    bot.send_message(id, response_text)

# -------------------------------------
# –†–ê–ë–û–¢–ê –° –ò–ù–õ–ê–ô–ù –ö–ù–û–ü–ö–ê–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# ------------------------------------- 
@bot.callback_query_handler(func=lambda call: call.data == 'sug')
def sug(call):
    id = call.from_user.id
    user_name = call.from_user.username
    topic = '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
    bot.send_message(id, trans_message('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –º—ã –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.', get_lang(id)))
    bot.register_next_step_handler(call.message, process_user_message, id, topic, user_name)

@bot.callback_query_handler(func=lambda call: call.data == 'help')
def help(call):
    id = call.from_user.id
    user_name = call.from_user.username
    topic = '–ü–æ–º–æ—â—å'
    bot.send_message(id, trans_message('–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏ —Å—Ç–æ—Ä—É–¥–Ω–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', get_lang(id)))
    bot.register_next_step_handler(call.message, process_user_message, id, topic, user_name)

# ------------------------------
# –ò–ù–õ–ê–ô–ù –ö–ù–û–ü–ö–ê –î–õ–Ø –í–´–ë–û–†–ê –Ø–ó–´–ö–ê
# ------------------------------
@bot.callback_query_handler(func=lambda call: call.data.startswith('lang_'))
def chose_lang(call):
    id = call.from_user.id
    user_name = call.from_user.username
    lang = call.data.split('_')
    lang = lang[1]
    print(lang)
    if not check_user(id):
        add_user(id, user_name, lang)
    else:
        add_lang(lang, id)
    next_step(id)




if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    bot.infinity_polling()
